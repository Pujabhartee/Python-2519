



22nd Aug
========

-> Identifiers
   ->



23rd Aug
========

-> Variables
    -> Variables are names for memory locations, which are used to store data for processing.

       -> Persistent Data (Permanent Data / Long Term Data)

          -> Hard Disk

       -> Non-Persistent Data (Temporary Data)

          -> RAM (Memory)

    -> A variable allows you to

       -> Assign Data

       -> Manipulates Data (If Required)

       -> Retrieve Data

    -> Syntax
       
       -> variable_name = value
           
           student_age = 25

          = Assignment operator

    -> Note: In Python, the type of a variable can change during execution.

    -> Note: A function does a task, and is represented usinf ()

    -> type() - what is the data type of specified variable

    -> id() - gives the memory address/location of variable

    -> a = 10 c = 10 Even though a and c are different variables,
                     Python optimizes memory and may reuse the same object.

    -> Mutable Data : Data that can change / can be changed (Modify)
       
       -> Lists, Dictionaries, Sets etc

    -> Immutable Data : Data that cannot be changed (Non Modifiable)
       
       -> numbers, strings, tuples, etc.

    -> Any variable data, we can be output using print()

    -> Operator overloading - a single operator exhibits multiple behaviours
                              based on the input data given.(OOPS Principle - Polymorphism )


25th August
============

 -> What is concatenation?
    -> Joining multiple strings

-> What is interpolation?
    -> interpolation in programming means replacing placeholders with actual values

-> Using f-string (Formatted String Literals)
   
   -> An f-String allows you to embed variables directly inside a string using {}


 -> A variable allows you to

       -> Assign Data
          -> Manipulates Data (If Required)
       -> Retrieve Data

-> Operators

   -> In python, an operator is symbol which perform an operation on 
      variables and values

   -> To Manipulate Data we need Operators

   -> Types of Operators
     
      -> Arithmetic Operators - Mathematical calculations
          ->  + - * / % 
          -> // -floor division (same as division, but round off value)
          -> ** -exponentation

   -> Compound Assignment Operators
      
      -> Python provides Operators to combine Arithmetic and Assignment Operators
          -> For concise (short hand) coding 
          -> x = x + 5 --> x += 5

   -> Comparison Operators

      -> Used to compare values and return a boolean type (True/False) as result
      -> ==, !=, >, <, >=, <=

   -> Logical Operators
     
      -> Used to combine multiple conditions (boolean values) 
      -> and - return True, when all conditions are True
      -> or - return True, when at least one condition is True
      -> not - negates the boolean value, if value is True then its result is False

   -> Membership Operators
       
       -> It's used to test if a sequence is present in object 
          -> in : returns True if the sequence has specified value
          -> not in : returns True if the sequence has no specified value.

   -> Identity Operators

      -> It's used to compare objects
      -> NOTE: Not comparing the values (If you want to compare values use ==)

         -> is : Returns True if both variables are pointing to same memory block
         -> is not : Returns True if both variables are not pointing to same memory block

      -> NOTE: Is Python 100% Object Oriented Language or not ? Yes
               -> In python everything is an object.
              
              -> Java has primitive data types

   -> Bitwise Operators (Generally used in Binary Level (low level languages) )


26th Aug
=========

-> Data Types
   
   -> Data Types are categories that define, what kind of data a variable can hold

   -> Numeric Types:
      
      -> Numbers with or without decimat points

          -> Integer : Whole Numbers 0,1,-1,199, etc 
          -> Floats : decimal numbers 3.14, 10.5, 2.0 etc
          -> Complex : Complex numbers like in maths
                       Math : a + ib (i - imaginary)
                       Python : a + bj (j - imaginary)

   -> Text Type:

          -> String : A sequence of characters declared between ' ' or " "
          -> NOTE : Python doesn't support single character data type
    
    -> Boolean Types: 
          
          -> Returns True or False

    -> Sequence Types:

          -> String is also a sequence type
          -> List : Multiple values to be stored as a sequence, represented in [] --> Mutable (Changable)
          -> Tuples : Multiple values to be stored as a sequence, represented in () --> Immutable (Not Changable)
          -> Range : 

    -> Set Type:
           
           -> Set : Muliple Values to be stored as a sequence, represented in {} --> Mutable, Unique data only
           -> Frozen Set : Muliple Values to be stored as a sequence, represented in {} --> Unique data only & Immutable

    -> Dictionary(Mapping) Type:
           
           -> Dictionary : Multiple values to be stored as a sequence of key and value pairs, represented in {}
    
    -> None Type:
            -> Represents nothing, i.e., absence of value

-> NOTE : All the above are predefined data types, we can create our custome data types based on requirements

-> NOTE : Strings, Sequence Types (***)


3rd Sep 2025
============

-> Type Conversion & Type Casting

   -> The above are used to convert. values from one data type to another data type

   -> Type Conversion : Implicit / Automatic - meaning python by default performs
                        conversions when it's safe and there is no data loss
           -> Widening : conversion of smaller data types to larger

    -> Type Casting : Explicit / Manually done by developer using built in functions
           -> Narrowing : Conversion of larger data types to smaller
               -> int() -> Convert to interger --> int(3.15) --> 3
               -> float() ->  Convert to float --> float(3) --> 3.0
               -> str() --> Convert to string --> str(100) --> "100"


4th Sep 2025
============

-> Control Structures / Statements

    -> Control Structures helps you to control the flow of execution in programm

    -> Categories 
          
            -> Decision Making Statements (Conditional Statements)
            -> Looping Statements (Iteretive Statements)
            -> Branching Statements (Jump Statements)

    -> Indentation : Refers to spaces to the begining of the line that will
                     define code blocks (conditions, loops, functions, classes etc)
         -> At least one space or recommended is 4 spaces
         -> All lines in the same block must have same Indentation
         -> Improper Indentation : Syntax Error
         
    -> input() function : takes user input from keyboard as a string
               -> variable =input("Enter Some Value")


    -> Conditional / Decision Making Statements
            
            -> Used to evaluate a condition (True/False)

            -> if statemment : Run block of code if condition is True
            -> if else : Runs one block of code if condition is true and
                         runs another block of code if condition is false
            -> elif ladder : Used to check multiple conditions
            -> match-case : alternative to if-else, when you have multiple conditions
                              (this is introduced in python 3.1 onwards)
       -> Nested Conditionals : Conditionals inside Conditionals
       
       -> Ternary Operator : also called as Conditional Operator, allows you to
                              write short hand if-else statement, generally used for single expressions

                  -> Syntax : value_if_true if condition else value_if_false

5th Sep, 2025
==============

-> Looping Statements (Iteretive Statements):
    
     -> Used to execute a block of code repeatedly, based on a condition.

         -> For repeatative tasks and automation tasks

     -> while loop : Runs a block of code, as long as the specified condition is True

     -> for loop : Used to Iterate over a Sequence(Strings, Lists, Tuples, Range etc)

-> Nested Loops : Loops inside Loops

6th Sep 2025
============
 -> dir() : used to list all the valid attributes and functionalities
 -> range() : used to generate a sequence of numbers
             -> support Index    (range(10) --> 0 to 9)

 -> range(start,stop,step)

      -> start : starting value by default is 0
      -> stop : ending value (excluded)
      -> step : increment by default is 1

   -> few examples

      -> range(5) : 0 1 2 3 4
      -> range(1,6) : 1 2 3 4 5
      -> range(1,6,1) : 1 2 3 4 5
      -> range(2,10,2) : 2 4 6 8

   -> To do the step in reverse use -1

      -> range(10,1,-1) : 10 9 8 7 6 5 4 3 2
      -> range(10,1,-2) : 10 8 6 4 2

-> Branching Statements (Jump Statements) 
   
     -> Used to control the flow of iterations inside the loops

         -> break : exit the loop entirely
         -> continue : skips the current iteration and continue the loop
         -> pass : does nothing, generally used as place holder

   
8th Sep 2025
============

-> Strings : One of the most important and widely used data type.

   -> In python, String is a sequence of character enclosed within single or double quote.
       We can use triple quotes also but not recommended.

   -> NOTE: triple quotes are recommended for multi line strinngs.

   -> If you want to use ' inside a string, enclose with double quotes.
   
   -> If you want to use " inside a string, enclose with single quotes.

   -> If you want to use both ' and " quote inside a string, then use triple-singe or triple-double quotes.


-> Indexing in Python
    
    -> Python allows you to access each character in a string using an index numbers

    -> Index Starts from 0 (zero)

    -> Inndexing goes in both positive and negative directions tooo

    -> text = "python"
        
         0   1  2  3  4  5 (positive indexing)
         p   y  t  h  o  n
        -6  -5 -4 -3 -2 -1  (negative indexing)

        -> print(text[index])
        -> print(text[4]) # o 

   -> If index is not given properly, leads to Errors

   -> NOTE: We have a predefined function len() --> return number of items in an object
    
   -> len() -> doesn't work with numbers

-> Slicing In Python : Slicing means cutting a substring from the original string using index

   -> To access range of characters in a string

   -> string[start:stop:step]
         
         start: index to start from (inclusive)
         stop: index to stop at (exclusive)
         step: how many charcter to step (default is 1)
