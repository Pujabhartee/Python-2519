



22nd Aug
========

-> Identifiers
   ->



23rd Aug
========

-> Variables
    -> Variables are names for memory locations, which are used to store data for processing.

       -> Persistent Data (Permanent Data / Long Term Data)

          -> Hard Disk

       -> Non-Persistent Data (Temporary Data)

          -> RAM (Memory)

    -> A variable allows you to

       -> Assign Data

       -> Manipulates Data (If Required)

       -> Retrieve Data

    -> Syntax
       
       -> variable_name = value
           
           student_age = 25

          = Assignment operator

    -> Note: In Python, the type of a variable can change during execution.

    -> Note: A function does a task, and is represented usinf ()

    -> type() - what is the data type of specified variable

    -> id() - gives the memory address/location of variable

    -> a = 10 c = 10 Even though a and c are different variables,
                     Python optimizes memory and may reuse the same object.

    -> Mutable Data : Data that can change / can be changed (Modify)
       
       -> Lists, Dictionaries, Sets etc

    -> Immutable Data : Data that cannot be changed (Non Modifiable)
       
       -> numbers, strings, tuples, etc.

    -> Any variable data, we can be output using print()

    -> Operator overloading - a single operator exhibits multiple behaviours
                              based on the input data given.(OOPS Principle - Polymorphism )


25th August
============

 -> What is concatenation?
    -> Joining multiple strings

-> What is interpolation?
    -> interpolation in programming means replacing placeholders with actual values

-> Using f-string (Formatted String Literals)
   
   -> An f-String allows you to embed variables directly inside a string using {}


 -> A variable allows you to

       -> Assign Data
          -> Manipulates Data (If Required)
       -> Retrieve Data

-> Operators

   -> In python, an operator is symbol which perform an operation on 
      variables and values

   -> To Manipulate Data we need Operators

   -> Types of Operators
     
      -> Arithmetic Operators - Mathematical calculations
          ->  + - * / % 
          -> // -floor division (same as division, but round off value)
          -> ** -exponentation

   -> Compound Assignment Operators
      
      -> Python provides Operators to combine Arithmetic and Assignment Operators
          -> For concise (short hand) coding 
          -> x = x + 5 --> x += 5

   -> Comparison Operators

      -> Used to compare values and return a boolean type (True/False) as result
      -> ==, !=, >, <, >=, <=

   -> Logical Operators
     
      -> Used to combine multiple conditions (boolean values) 
      -> and - return True, when all conditions are True
      -> or - return True, when at least one condition is True
      -> not - negates the boolean value, if value is True then its result is False

   -> Membership Operators
       
       -> It's used to test if a sequence is present in object 
          -> in : returns True if the sequence has specified value
          -> not in : returns True if the sequence has no specified value.

   -> Identity Operators

      -> It's used to compare objects
      -> NOTE: Not comparing the values (If you want to compare values use ==)

         -> is : Returns True if both variables are pointing to same memory block
         -> is not : Returns True if both variables are not pointing to same memory block

      -> NOTE: Is Python 100% Object Oriented Language or not ? Yes
               -> In python everything is an object.
              
              -> Java has primitive data types

   -> Bitwise Operators (Generally used in Binary Level (low level languages) )


26th Aug
=========

-> Data Types
   
   -> Data Types are categories that define, what kind of data a variable can hold

   -> Numeric Types:
      
      -> Numbers with or without decimat points

          -> Integer : Whole Numbers 0,1,-1,199, etc 
          -> Floats : decimal numbers 3.14, 10.5, 2.0 etc
          -> Complex : Complex numbers like in maths
                       Math : a + ib (i - imaginary)
                       Python : a + bj (j - imaginary)

   -> Text Type:

          -> String : A sequence of characters declared between ' ' or " "
          -> NOTE : Python doesn't support single character data type
    
    -> Boolean Types: 
          
          -> Returns True or False

    -> Sequence Types:

          -> String is also a sequence type
          -> List : Multiple values to be stored as a sequence, represented in [] --> Mutable (Changable)
          -> Tuples : Multiple values to be stored as a sequence, represented in () --> Immutable (Not Changable)
          -> Range : 

    -> Set Type:
           
           -> Set : Muliple Values to be stored as a sequence, represented in {} --> Mutable, Unique data only
           -> Frozen Set : Muliple Values to be stored as a sequence, represented in {} --> Unique data only & Immutable

    -> Dictionary(Mapping) Type:
           
           -> Dictionary : Multiple values to be stored as a sequence of key and value pairs, represented in {}
    
    -> None Type:
            -> Represents nothing, i.e., absence of value

-> NOTE : All the above are predefined data types, we can create our custome data types based on requirements

-> NOTE : Strings, Sequence Types (***)


3rd Sep 2025
============

-> 